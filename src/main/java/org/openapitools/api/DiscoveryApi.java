/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.2-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ResponseDiscoveryOutagesList;
import org.openapitools.model.ResponseDiscoveryStatus;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-09-04T03:14:24.819Z[GMT]")

@Validated
@Api(value = "discovery", description = "the discovery API")
public interface DiscoveryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Get Outages", nickname = "getOutages", notes = "Obtain a list of scheduled outages for the implementation", response = ResponseDiscoveryOutagesList.class, tags={ "Common","Discovery", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseDiscoveryOutagesList.class) })
    @RequestMapping(value = "/discovery/outages",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseDiscoveryOutagesList> getOutages(@ApiParam(value = "Version of the API end point requested by the client. Must be set to a positive integer. If the version(s) requested is not supported then the holder should respond with a 406 Not Acceptable. See [here](#request-headers)" ,required=true) @RequestHeader(value="x-v", required=true) String xV,@ApiParam(value = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the holder should respond with a 406 Not Acceptable." ) @RequestHeader(value="x-min-v", required=false) String xMinV) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"data\" : {    \"outages\" : [ {      \"duration\" : 0.8008281904610115,      \"outageTime\" : \"outageTime\",      \"isPartial\" : true,      \"explanation\" : \"explanation\"    }, {      \"duration\" : 0.8008281904610115,      \"outageTime\" : \"outageTime\",      \"isPartial\" : true,      \"explanation\" : \"explanation\"    } ]  },  \"meta\" : \"{}\",  \"links\" : {    \"self\" : \"self\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get Status", nickname = "getStatus", notes = "Obtain a health check status for the implementation", response = ResponseDiscoveryStatus.class, tags={ "Common","Discovery", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseDiscoveryStatus.class) })
    @RequestMapping(value = "/discovery/status",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseDiscoveryStatus> getStatus(@ApiParam(value = "Version of the API end point requested by the client. Must be set to a positive integer. If the version(s) requested is not supported then the holder should respond with a 406 Not Acceptable. See [here](#request-headers)" ,required=true) @RequestHeader(value="x-v", required=true) String xV,@ApiParam(value = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the holder should respond with a 406 Not Acceptable." ) @RequestHeader(value="x-min-v", required=false) String xMinV) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"data\" : {    \"updateTime\" : \"updateTime\",    \"explanation\" : \"explanation\",    \"expectedResolutionTime\" : \"expectedResolutionTime\",    \"detectionTime\" : \"detectionTime\",    \"status\" : \"OK\"  },  \"meta\" : \"{}\",  \"links\" : {    \"self\" : \"self\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
